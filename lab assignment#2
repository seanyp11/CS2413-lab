#define MAX 100

typedef struct {
int data[MAX];
int top;    
} MyStack;


MyStack* myStackCreate() {
   MyStack *stack = (MyStack*)malloc(sizeof(MyStack));
   stack->top= -1;
   return stack; 
}

void myStackPush(MyStack* obj, int x) {
    if(obj->top < MAX - 1){
        obj->data[++obj->top]=x;
    } else{
        printf("stack overflow\n");
    }
}

int myStackPop(MyStack* obj) {
    if(obj->top == -1){
        printf("stack underflow\n");
        return -1;
    }
    return obj->data[obj->top--];
}

int myStackTop(MyStack* obj) {
 if (obj->top== -1){
    printf("stack is empty\n");
    return -1;
 }   
 return obj->data[obj->top];
}

bool myStackEmpty(MyStack* obj) {
    return obj->top == -1;
}

void myStackFree(MyStack* obj) {
    free(obj);
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/

//next question


typedef struct Node{
    int val;
    struct Node* next;
} Node; 

typedef struct MyQueue{
    struct Node* head;
    struct Node* tail;
} MyQueue;

MyQueue* myQueueCreate() {
    MyQueue* queue = (MyQueue*)malloc(sizeof(MyQueue));
    queue->head = (Node*)malloc(sizeof(Node));
    queue->tail = (Node*)malloc(sizeof(Node));
    queue->head->next = queue->tail;
    queue->tail->next = queue->head;
    return queue; 
}

bool myQueueEmpty(MyQueue* obj) {
    if (obj->head->next == obj->tail) return true;
    else return false;
}

void myQueuePush(MyQueue* obj, int x) {
    Node* new_node = (Node*)malloc(sizeof(Node));
    new_node->val = x;
    Node* last = obj->tail->next;
    
    last->next = new_node;
    new_node->next = obj->tail;
    obj->tail->next = new_node;
    
}

int myQueuePop(MyQueue* obj) {
    if ( !myQueueEmpty(obj) ){
        Node* front = obj->head->next;
        obj->head->next = front->next;
        //if it's the last node, we point tail back to head:
        if (obj->head->next == obj->tail) obj->tail->next = obj->head;
        int val = front->val;
        free(front);
        return val;
    }
    return 0;
}

int myQueuePeek(MyQueue* obj) {
    if (!myQueueEmpty(obj)){
        return obj->head->next->val;
    }
    return 0;
}

void myQueueFree(MyQueue* obj) {
    Node* current = obj->head;
    while(current != obj->tail){
        Node* temp = current;
        current = current->next;
        free(temp);
    }
    free(current);
    free(obj);
}

/**
 * Your MyQueue struct will be instantiated and called as such:
 * MyQueue* obj = myQueueCreate();
 * myQueuePush(obj, x);
 
 * int param_2 = myQueuePop(obj);
 
 * int param_3 = myQueuePeek(obj);
 
 * bool param_4 = myQueueEmpty(obj);
 
 * myQueueFree(obj);
*/
