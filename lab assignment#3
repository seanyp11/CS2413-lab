/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
  void preOrder(struct TreeNode* root, int *arr, int *returnSize){
    if(root!=NULL){
        arr[(*returnSize)++]=root->val;
        preOrder(root->left, arr, returnSize);
        preOrder(root->right, arr, returnSize);
    }
}

int* preorderTraversal(struct TreeNode* root, int* returnSize) {
    int* arr=(int*)malloc(sizeof(int)*100);
    *returnSize=0;
    preOrder(root, arr, returnSize);
    return arr;
}  

//in-order traversal
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */
/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
void traverse(struct TreeNode* tree, int* arr, unsigned int* i)
{
    if(tree)
    {
        traverse(tree->left, arr, i);
        arr[(*i)++] = tree->val;
        traverse(tree->right, arr, i);
    }
}
size_t
countNodes(struct TreeNode* tree) 
{
    if(tree == NULL) return 0;
    return 1 + countNodes(tree->left) + countNodes(tree->right);
}

int* inorderTraversal(struct TreeNode* root, int* returnSize) 
{
    size_t count = countNodes(root);
    *returnSize = count;
    unsigned int i = 0;
    int* res = malloc(count*sizeof(int));
    traverse(root, res, &i);
    return res;
}    

